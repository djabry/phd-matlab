function [wavenum, radiance_array] = fftscan_lbl_files_ap(filelist, ...
    FTSparams_input, lblrtm_path)

%------------------------------------------------------------------------------
%
% function [wavenum, radiance_array] = fftscan_lbl_files(filelist, FTSparams_input)
%
%
% Given a list of monochromatic LBLRTM output files (e.g., the full
% resolution), create a TAPE5 file to process the file with an FFTscan, and
% and a "plot" to create a formatted ASCII outputfile. LBLRTM is run with
% each file as input, by changing a UNIX symbolic link.
%
% This is intended to be used to postprocess Analytic Jacobian outputs,
% since a large group of monochromatic output files will be created (for
% the derivative at each level). This function assumes all LBLRTM files
% have the same wavelength grid (so, don't run this on OD files with the
% adaptive wavenumber spacing.)
%
% INPUTS:
%   filelist :
%       an array of structures (the type returned from the MATLAB
%       dir() function), containing the LBLRTM files to process
%
%   FTSparams_input:
%       Parameters for a simulated FTS (Fourier Transform 
%       Spectrometer) observation of the computed radiance. The input 
%       should be a 3 element array, with elements:
%           optical path difference [cm]
%           wavenumber min [1/cm]
%           wavenumber max [1/cm]
%           sampling interval [1/cm]
%       Or, use a string to name some particular instruments, to use their 
%       default parameters: (values for AERI copied from D.Turner's
%       rundecker.pro)
%       'AERIch1': [1.03702766,  497.57589, 1803.71268, 0.48214700]
%       'AERIch2': [1.03702766, 1796.48042, 3022.09850, 0.48214700]
%
%   lblrtm_path:
%       Optional - string containing the path + filename of the LBLRTM 
%       executable. By default, $LBL_HOME/bin/lblrtm is used.
%
% OUTPUTS:
%   wavenumber: array of the FFT scanned results, N elements
%   radiance_array: 2-D radiance array, N x M elements, where M is the
%       of files processed.
%   files on disk, with the same name as the input files, with .dat
%   appended (for the fftscan, binary file), and .asc (the plot, ASCII
%   file)
%
% Modification history:
%   A. Merrelli, July 2009
%   A. Merrelli, Jan 2010 - some comments & clarification, added call to 
%       getenv to automatically find the lblrtm executable from $LBL_HOME.
%
%------------------------------------------------------------------------------

if ischar(FTSparams_input);
    switch upper(FTSparams_input)
        case 'AERICH1'
            FTSparams = [1.03702766, ...
                497.57589, 1803.71268, 0.48214700];
        case 'AERICH2'
            FTSparams = [1.03702766, ...
                1796.48042, 3022.09850, 0.48214700];
        otherwise, error(['No FTS parameters for ' FTSparams_input]);
    end
else
    FTSparams = FTSparams_input;
end

if nargin < 3
    lblrtm_path = [getenv('LBL_HOME') '/bin/lblrtm'];
end


fid = fopen('temp_fftscan.t5','w');

monorad_tapenum = 19;
fftscan_tapenum = 20;
plot_tapenum = 21;

rec_1_1 = '$ temp_fftscan.t5 auto-generated by fftscan_lbl_files.m. FFTscan commands: \n';
rec_1_2 = ' HI=0 F4=0 CN=0 AE=0 EM=0 SC=2 FI=0 PL=0 TS=0 AM=0 MG=0 LA=0 OD=0 XS=0\n';

% rec_10_1_format = '%10.3f%10.3f%10.3f%5d  -12     %10.3f%5d    1    1%5d\n';
% rec_10_1 = sprintf(rec_10_1_format, FTSparams(1), FTSparams(2), ...
%     FTSparams(3), 1, FTSparams(4), monorad_tapenum, fftscan_tapenum);
% 
% rec_10_2_format = '%10.3f\n';
% rec_10_2 = sprintf(rec_10_2_format,3.8528);
% 

fprintf(fid, rec_1_1);
fprintf(fid, rec_1_2);

% fprintf(fid, rec_10_1);
% fprintf(fid, rec_10_2);
% fprintf(fid, '-1.\n'); % closes FFT scan inputs

%rec_9_1_format = '%10.3f%10.3f%10.3f%5d                       12    1    1%5d\n';
 rec_9_1_format = '%10.3f%10.3f%10.3f%5d                    %5d    1    1%5d\n';

rec_9_1_line1 = sprintf(rec_9_1_format, FTSparams(1), FTSparams(2), ...
    FTSparams(3), 1,monorad_tapenum, fftscan_tapenum);

fprintf(fid, rec_9_1_line1);

fprintf(fid, '-1\n');

rec_1_1 = '$ temp_fftscan.t5 auto-generated by fftscan_lbl_files.m. PLOT commands: \n';
rec_1_2 = ' HI=0 F4=0 CN=0 AE=0 EM=0 SC=0 FI=0 PL=1 TS=0 AM=0 MG=0 LA=0 OD=0 XS=0\n';
rec_12_1 = '# plot title not used\n';
rec_12_2_format = '%10.3f%10.3f   10.2000  100.0000    5    0%5d    0    1.0000 0  0    0\n';
rec_12_2 = sprintf(rec_12_2_format, FTSparams(2), FTSparams(3), fftscan_tapenum);
rec_12_3_format = '    0.0000    1.2000    7.0200    0.2000    4    0    1    1    0    0 0    3%3d\n';
rec_12_3 = sprintf(rec_12_3_format, plot_tapenum);

fprintf(fid, rec_1_1);
fprintf(fid, rec_1_2);
fprintf(fid, rec_12_1);
fprintf(fid, rec_12_2);
fprintf(fid, rec_12_3);
fprintf(fid, '-1.\n'); % closes plot inputs
fprintf(fid, '%%\n'); % EOF marker.

fclose(fid);

if exist('TAPE5', 'file')
    unix('rm TAPE5');
end
unix('ln -s temp_fftscan.t5 TAPE5');
nfiles = length(filelist);

% These TAPE file names are used by the TAPE5 we create:
%   We create a link to the monorad_file, and then LBLRTM will create 
%   the fftscan_file and plot_file according to the TAPE numbers assigned 
%   in the TAPE5 file.
monorad_file = ['TAPE' sprintf('%d',monorad_tapenum)];
fftscan_file = ['TAPE' sprintf('%d',fftscan_tapenum)];
plot_file = ['TAPE' sprintf('%d',plot_tapenum)];


% run the first file, to see how long the array is (no easy way to 
% determine this otherwise)
q=1;
if exist(monorad_file, 'file')
    unix(['rm ' monorad_file]);
end
shell_command = ['ln -s ' filelist(q).name ' ' monorad_file];
unix(shell_command);
[status, result_text] = unix(lblrtm_path);
[wavenum,radiance] = readFile(fftscan_file);

shell_command = ['mv ' plot_file ' ' filelist(q).name '.asc'];
unix(shell_command);
shell_command = ['mv ' fftscan_file ' ' filelist(q).name '.dat'];
unix(shell_command);

% now with the length, we allocate the 2D array we need.
npts = length(wavenum);
radiance_array = zeros(npts, nfiles);
radiance_array(:,1) = radiance;


function [v,rad]=readFile(filename)
    
    
    
    try
        
        tmp = lbl_read(filename,0,1);
        v= tmp.v;
        rad=tmp.od;
        
        
    catch err
        
        wn = [];
        v=[];
        
       try
           
           
           [wn,rad,trans]=lblrtm_TAPE12_reader(filename,'d');
           
       catch err
           
           [wn,rad]=lblrtm_TAPE11_reader(filename,'d');
       end
       
       for i=1:size(wn,1)
           vi = wn(i,1):wn(i,3):wn(i,2);
           v = [v;vi'];
           
       end
       
           
           
        
    end


end

for q = 2:nfiles;
    shell_command = ['ln -s ' filelist(q).name ' ' monorad_file];
    unix(['rm ' monorad_file]);
    unix(shell_command);
    [status, result_text] = unix(lblrtm_path);

    
    [v,rad] = readFile(fftscan_file);
    radiance_array(:,q) = rad;
    shell_command = ['mv ' plot_file ' ' filelist(q).name '.asc'];
    unix(shell_command);
    shell_command = ['mv ' fftscan_file ' ' filelist(q).name '.dat'];
    unix(shell_command);
end

unix('rm TAPE5');
unix(['rm ' monorad_file]);
end

%done!